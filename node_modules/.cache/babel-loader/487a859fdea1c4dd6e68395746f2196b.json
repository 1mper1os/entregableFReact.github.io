{"ast":null,"code":"var _jsxFileName = \"/home/imperio/Documents/code/pp/Login-Auth-Firebase-ReactJS/src/components/dashboard.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, query, where, getDocs, updateDoc, addDoc, deleteDoc, doc } from 'firebase/firestore';\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { Button, Select, Input, Card, CardHeader, CardTitle, CardContent } from '@/components/ui/'; // Configuración de Firebase (reemplaza con tu configuración)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {// Tu configuración de Firebase aquí\n};\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\nconst auth = getAuth(app);\n\nconst MedicalAppointmentsDashboard = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [user, setUser] = useState(null);\n  const [specialties, setSpecialties] = useState([]);\n  const [doctors, setDoctors] = useState([]);\n  const [availableSlots, setAvailableSlots] = useState([]);\n  const [selectedSpecialty, setSelectedSpecialty] = useState('');\n  const [selectedDoctor, setSelectedDoctor] = useState(''); // Autenticación de usuario\n\n  const handleLogin = async (email, password) => {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      setUser(userCredential.user);\n    } catch (error) {\n      console.error(\"Error de inicio de sesión\", error);\n    }\n  }; // Registro de usuario\n\n\n  const handleRegister = async (email, password) => {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      setUser(userCredential.user);\n    } catch (error) {\n      console.error(\"Error de registro\", error);\n    }\n  }; // Cargar especialidades\n\n\n  const loadSpecialties = async () => {\n    const specialtiesRef = collection(db, 'specialties');\n    const specialtiesSnapshot = await getDocs(specialtiesRef);\n    const specialtiesList = specialtiesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    setSpecialties(specialtiesList);\n  }; // Cargar médicos por especialidad\n\n\n  const loadDoctors = async specialty => {\n    const doctorsRef = collection(db, 'doctors');\n    const q = query(doctorsRef, where('specialty', '==', specialty));\n    const doctorsSnapshot = await getDocs(q);\n    const doctorsList = doctorsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    setDoctors(doctorsList);\n  }; // Cargar horarios disponibles\n\n\n  const loadAvailableSlots = async doctorId => {\n    const slotsRef = collection(db, 'appointments');\n    const q = query(slotsRef, where('doctorId', '==', doctorId), where('available', '==', true));\n    const slotsSnapshot = await getDocs(q);\n    const slotsList = slotsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    setAvailableSlots(slotsList);\n  }; // Reservar cita\n\n\n  const bookAppointment = async slotId => {\n    const slotRef = doc(db, 'appointments', slotId);\n    await updateDoc(slotRef, {\n      available: false,\n      userId: user.uid\n    });\n  }; // Cancelar cita\n\n\n  const cancelAppointment = async slotId => {\n    const slotRef = doc(db, 'appointments', slotId);\n    await updateDoc(slotRef, {\n      available: true,\n      userId: null\n    });\n  }; // Componente de Panel de Administrador\n\n\n  const AdminPanel = () => {\n    _s();\n\n    const [newSpecialty, setNewSpecialty] = useState('');\n    const [newDoctor, setNewDoctor] = useState({\n      name: '',\n      specialty: ''\n    });\n    const [newSlot, setNewSlot] = useState({\n      doctorId: '',\n      date: '',\n      time: ''\n    });\n\n    const addSpecialty = async () => {\n      await addDoc(collection(db, 'specialties'), {\n        name: newSpecialty\n      });\n      loadSpecialties();\n    };\n\n    const addDoctor = async () => {\n      await addDoc(collection(db, 'doctors'), newDoctor);\n      loadDoctors(newDoctor.specialty);\n    };\n\n    const addAppointmentSlot = async () => {\n      await addDoc(collection(db, 'appointments'), { ...newSlot,\n        available: true\n      });\n      loadAvailableSlots(newSlot.doctorId);\n    };\n\n    return /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"Panel de Administrador\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Nueva especialidad\",\n            value: newSpecialty,\n            onChange: e => setNewSpecialty(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: addSpecialty,\n            children: \"Agregar Especialidad\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  }; // Renderizado principal\n\n\n  _s(AdminPanel, \"RoCHojT1i/KIrR440nzT8OG5NnU=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"password\",\n        placeholder: \"Contrase\\xF1a\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => handleLogin(),\n        children: \"Iniciar Sesi\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => handleRegister(),\n        children: \"Registrarse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        value: selectedSpecialty,\n        onValueChange: value => {\n          setSelectedSpecialty(value);\n          loadDoctors(value);\n        },\n        children: specialties.map(specialty => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: specialty.name,\n          children: specialty.name\n        }, specialty.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        value: selectedDoctor,\n        onValueChange: value => {\n          setSelectedDoctor(value);\n          loadAvailableSlots(value);\n        },\n        children: doctors.map(doctor => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: doctor.id,\n          children: doctor.name\n        }, doctor.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: availableSlots.map(slot => /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Fecha: \", slot.date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Hora: \", slot.time]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => bookAppointment(slot.id),\n              children: \"Reservar Cita\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }, this)\n        }, slot.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), user.email === 'admin@example.com' && /*#__PURE__*/_jsxDEV(AdminPanel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(MedicalAppointmentsDashboard, \"62VnZCqTBcK8wLHxI65eTpTKcbw=\");\n\n_c = MedicalAppointmentsDashboard;\nexport default MedicalAppointmentsDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicalAppointmentsDashboard\");","map":{"version":3,"sources":["/home/imperio/Documents/code/pp/Login-Auth-Firebase-ReactJS/src/components/dashboard.js"],"names":["React","useState","useEffect","initializeApp","getFirestore","collection","query","where","getDocs","updateDoc","addDoc","deleteDoc","doc","getAuth","signInWithEmailAndPassword","createUserWithEmailAndPassword","Button","Select","Input","Card","CardHeader","CardTitle","CardContent","firebaseConfig","app","db","auth","MedicalAppointmentsDashboard","user","setUser","specialties","setSpecialties","doctors","setDoctors","availableSlots","setAvailableSlots","selectedSpecialty","setSelectedSpecialty","selectedDoctor","setSelectedDoctor","handleLogin","email","password","userCredential","error","console","handleRegister","loadSpecialties","specialtiesRef","specialtiesSnapshot","specialtiesList","docs","map","id","data","loadDoctors","specialty","doctorsRef","q","doctorsSnapshot","doctorsList","loadAvailableSlots","doctorId","slotsRef","slotsSnapshot","slotsList","bookAppointment","slotId","slotRef","available","userId","uid","cancelAppointment","AdminPanel","newSpecialty","setNewSpecialty","newDoctor","setNewDoctor","name","newSlot","setNewSlot","date","time","addSpecialty","addDoctor","addAppointmentSlot","e","target","value","doctor","slot"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { \n  getFirestore, \n  collection, \n  query, \n  where, \n  getDocs, \n  updateDoc, \n  addDoc, \n  deleteDoc,\n  doc \n} from 'firebase/firestore';\nimport { \n  getAuth, \n  signInWithEmailAndPassword, \n  createUserWithEmailAndPassword \n} from 'firebase/auth';\nimport { \n  Button, \n  Select, \n  Input, \n  Card, \n  CardHeader, \n  CardTitle, \n  CardContent \n} from '@/components/ui/';\n\n// Configuración de Firebase (reemplaza con tu configuración)\nconst firebaseConfig = {\n  // Tu configuración de Firebase aquí\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\nconst auth = getAuth(app);\n\nconst MedicalAppointmentsDashboard = () => {\n  const [user, setUser] = useState(null);\n  const [specialties, setSpecialties] = useState([]);\n  const [doctors, setDoctors] = useState([]);\n  const [availableSlots, setAvailableSlots] = useState([]);\n  const [selectedSpecialty, setSelectedSpecialty] = useState('');\n  const [selectedDoctor, setSelectedDoctor] = useState('');\n\n  // Autenticación de usuario\n  const handleLogin = async (email, password) => {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      setUser(userCredential.user);\n    } catch (error) {\n      console.error(\"Error de inicio de sesión\", error);\n    }\n  };\n\n  // Registro de usuario\n  const handleRegister = async (email, password) => {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      setUser(userCredential.user);\n    } catch (error) {\n      console.error(\"Error de registro\", error);\n    }\n  };\n\n  // Cargar especialidades\n  const loadSpecialties = async () => {\n    const specialtiesRef = collection(db, 'specialties');\n    const specialtiesSnapshot = await getDocs(specialtiesRef);\n    const specialtiesList = specialtiesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    setSpecialties(specialtiesList);\n  };\n\n  // Cargar médicos por especialidad\n  const loadDoctors = async (specialty) => {\n    const doctorsRef = collection(db, 'doctors');\n    const q = query(doctorsRef, where('specialty', '==', specialty));\n    const doctorsSnapshot = await getDocs(q);\n    const doctorsList = doctorsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    setDoctors(doctorsList);\n  };\n\n  // Cargar horarios disponibles\n  const loadAvailableSlots = async (doctorId) => {\n    const slotsRef = collection(db, 'appointments');\n    const q = query(\n      slotsRef, \n      where('doctorId', '==', doctorId),\n      where('available', '==', true)\n    );\n    const slotsSnapshot = await getDocs(q);\n    const slotsList = slotsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    setAvailableSlots(slotsList);\n  };\n\n  // Reservar cita\n  const bookAppointment = async (slotId) => {\n    const slotRef = doc(db, 'appointments', slotId);\n    await updateDoc(slotRef, {\n      available: false,\n      userId: user.uid\n    });\n  };\n\n  // Cancelar cita\n  const cancelAppointment = async (slotId) => {\n    const slotRef = doc(db, 'appointments', slotId);\n    await updateDoc(slotRef, {\n      available: true,\n      userId: null\n    });\n  };\n\n  // Componente de Panel de Administrador\n  const AdminPanel = () => {\n    const [newSpecialty, setNewSpecialty] = useState('');\n    const [newDoctor, setNewDoctor] = useState({\n      name: '',\n      specialty: ''\n    });\n    const [newSlot, setNewSlot] = useState({\n      doctorId: '',\n      date: '',\n      time: ''\n    });\n\n    const addSpecialty = async () => {\n      await addDoc(collection(db, 'specialties'), { name: newSpecialty });\n      loadSpecialties();\n    };\n\n    const addDoctor = async () => {\n      await addDoc(collection(db, 'doctors'), newDoctor);\n      loadDoctors(newDoctor.specialty);\n    };\n\n    const addAppointmentSlot = async () => {\n      await addDoc(collection(db, 'appointments'), {\n        ...newSlot,\n        available: true\n      });\n      loadAvailableSlots(newSlot.doctorId);\n    };\n\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Panel de Administrador</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Formularios para agregar especialidades, médicos y slots */}\n          <div>\n            <Input \n              placeholder=\"Nueva especialidad\" \n              value={newSpecialty}\n              onChange={(e) => setNewSpecialty(e.target.value)}\n            />\n            <Button onClick={addSpecialty}>Agregar Especialidad</Button>\n          </div>\n          {/* Similar para médicos y slots */}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  // Renderizado principal\n  return (\n    <div>\n      {!user ? (\n        <div>\n          {/* Formulario de login/registro */}\n          <Input placeholder=\"Email\" />\n          <Input type=\"password\" placeholder=\"Contraseña\" />\n          <Button onClick={() => handleLogin()}>Iniciar Sesión</Button>\n          <Button onClick={() => handleRegister()}>Registrarse</Button>\n        </div>\n      ) : (\n        <div>\n          <Select \n            value={selectedSpecialty}\n            onValueChange={(value) => {\n              setSelectedSpecialty(value);\n              loadDoctors(value);\n            }}\n          >\n            {specialties.map(specialty => (\n              <option key={specialty.id} value={specialty.name}>\n                {specialty.name}\n              </option>\n            ))}\n          </Select>\n\n          <Select \n            value={selectedDoctor}\n            onValueChange={(value) => {\n              setSelectedDoctor(value);\n              loadAvailableSlots(value);\n            }}\n          >\n            {doctors.map(doctor => (\n              <option key={doctor.id} value={doctor.id}>\n                {doctor.name}\n              </option>\n            ))}\n          </Select>\n\n          <div>\n            {availableSlots.map(slot => (\n              <Card key={slot.id}>\n                <CardContent>\n                  <p>Fecha: {slot.date}</p>\n                  <p>Hora: {slot.time}</p>\n                  <Button onClick={() => bookAppointment(slot.id)}>\n                    Reservar Cita\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {user.email === 'admin@example.com' && <AdminPanel />}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MedicalAppointmentsDashboard;\n"]},"metadata":{},"sourceType":"module"}