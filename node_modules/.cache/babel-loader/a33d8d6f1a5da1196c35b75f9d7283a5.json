{"ast":null,"code":"var _jsxFileName = \"/home/imperio/Documents/code/pp/Login-Auth-Firebase-ReactJS/src/components/dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { db } from './firebase';\nimport { doc, addDoc, collection, updateDoc, deleteDoc, getDocs } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [nombre, setNombre] = useState('');\n  const [descripcion, setDescripcion] = useState('');\n  const [precio, setPrecio] = useState('');\n  const [fetchData, setFetchData] = useState([]);\n  const [id, setId] = useState(''); // Referencia a la colección de Firestore\n\n  const dbref = collection(db, 'crud-React'); // Función para agregar datos a la base de datos\n\n  const add = async () => {\n    try {\n      await addDoc(dbref, {\n        Nombre: nombre,\n        Precio: precio,\n        Descripcion: descripcion\n      });\n      alert(\"Los Datos se Agregaron Correctamente\");\n      fetch(); // Actualiza la lista después de agregar\n\n      clearFields(); // Limpia los campos\n    } catch (error) {\n      alert(\"Los Datos no se pudieron Agregar. Vuelve a intentarlo.\");\n    }\n  }; // Función para obtener datos de la base de datos\n\n\n  const fetch = async () => {\n    const snapshot = await getDocs(dbref);\n    const fetchData = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    setFetchData(fetchData);\n    console.log(fetchData);\n  };\n\n  useEffect(() => {\n    fetch();\n  }, []); // Función para cargar datos en los campos para editar\n\n  const passData = id => {\n    const matchId = fetchData.find(data => data.id === id);\n\n    if (matchId) {\n      setNombre(matchId.Nombre);\n      setPrecio(matchId.Precio);\n      setDescripcion(matchId.Descripcion);\n      setId(matchId.id);\n    }\n  }; // Función para actualizar la información\n\n\n  const update = async () => {\n    if (!id) return; // Asegúrate de que hay un ID para actualizar\n\n    const updateref = doc(dbref, id);\n\n    try {\n      await updateDoc(updateref, {\n        Nombre: nombre,\n        Precio: precio,\n        Descripcion: descripcion\n      });\n      alert('Actualizado correctamente');\n      fetch(); // Actualiza la lista después de actualizar\n\n      clearFields(); // Limpia los campos\n    } catch (error) {\n      alert('Hubo un problema al actualizar los datos');\n    }\n  }; // Función para eliminar datos de la base de datos\n\n\n  const del = async id => {\n    const delref = doc(dbref, id);\n\n    try {\n      await deleteDoc(delref);\n      alert('Se borró correctamente la información');\n      fetch(); // Actualiza la lista después de eliminar\n    } catch (error) {\n      alert('No se borró la información. Inténtalo de nuevo.');\n    }\n  }; // Función para limpiar los campos\n\n\n  const clearFields = () => {\n    setNombre('');\n    setDescripcion('');\n    setPrecio('');\n    setId('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"A\\xF1adir o Actualizar Producto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Nombre\",\n          autoComplete: \"off\",\n          value: nombre,\n          onChange: e => setNombre(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Precio\",\n          autoComplete: \"off\",\n          value: precio,\n          onChange: e => setPrecio(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Descripci\\xF3n\",\n          autoComplete: \"off\",\n          value: descripcion,\n          onChange: e => setDescripcion(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: add,\n        children: \"A\\xF1adir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: update,\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"database\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Base de Datos CRUD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: fetchData.map(data => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Nombre: \", data.Nombre]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Precio: \", data.Precio]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Descripci\\xF3n: \", data.Descripcion]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => passData(data.id),\n            children: \"Actualizar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => del(data.id),\n            children: \"Eliminar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this)]\n        }, data.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Dashboard, \"hQWiTbfmj2zW4UmNDl7ieE7iDSY=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/imperio/Documents/code/pp/Login-Auth-Firebase-ReactJS/src/components/dashboard.js"],"names":["React","useEffect","useState","db","doc","addDoc","collection","updateDoc","deleteDoc","getDocs","Dashboard","nombre","setNombre","descripcion","setDescripcion","precio","setPrecio","fetchData","setFetchData","id","setId","dbref","add","Nombre","Precio","Descripcion","alert","fetch","clearFields","error","snapshot","docs","map","data","console","log","passData","matchId","find","update","updateref","del","delref","e","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { db } from './firebase';\nimport { doc, addDoc, collection, updateDoc, deleteDoc, getDocs } from 'firebase/firestore';\n\nconst Dashboard = () => {\n  const [nombre, setNombre] = useState('');\n  const [descripcion, setDescripcion] = useState('');\n  const [precio, setPrecio] = useState('');\n  const [fetchData, setFetchData] = useState([]);\n  const [id, setId] = useState('');\n\n  // Referencia a la colección de Firestore\n  const dbref = collection(db, 'crud-React');\n\n  // Función para agregar datos a la base de datos\n  const add = async () => {\n    try {\n      await addDoc(dbref, { Nombre: nombre, Precio: precio, Descripcion: descripcion });\n      alert(\"Los Datos se Agregaron Correctamente\");\n      fetch(); // Actualiza la lista después de agregar\n      clearFields(); // Limpia los campos\n    } catch (error) {\n      alert(\"Los Datos no se pudieron Agregar. Vuelve a intentarlo.\");\n    }\n  };\n\n  // Función para obtener datos de la base de datos\n  const fetch = async () => {\n    const snapshot = await getDocs(dbref);\n    const fetchData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n    setFetchData(fetchData);\n    console.log(fetchData);\n  };\n\n  useEffect(() => {\n    fetch();\n  }, []);\n\n  // Función para cargar datos en los campos para editar\n  const passData = (id) => {\n    const matchId = fetchData.find(data => data.id === id);\n    if (matchId) {\n      setNombre(matchId.Nombre);\n      setPrecio(matchId.Precio);\n      setDescripcion(matchId.Descripcion);\n      setId(matchId.id);\n    }\n  };\n\n  // Función para actualizar la información\n  const update = async () => {\n    if (!id) return; // Asegúrate de que hay un ID para actualizar\n\n    const updateref = doc(dbref, id);\n    try {\n      await updateDoc(updateref, { Nombre: nombre, Precio: precio, Descripcion: descripcion });\n      alert('Actualizado correctamente');\n      fetch(); // Actualiza la lista después de actualizar\n      clearFields(); // Limpia los campos\n    } catch (error) {\n      alert('Hubo un problema al actualizar los datos');\n    }\n  };\n\n  // Función para eliminar datos de la base de datos\n  const del = async (id) => {\n    const delref = doc(dbref, id);\n    try {\n      await deleteDoc(delref);\n      alert('Se borró correctamente la información');\n      fetch(); // Actualiza la lista después de eliminar\n    } catch (error) {\n      alert('No se borró la información. Inténtalo de nuevo.');\n    }\n  };\n\n  // Función para limpiar los campos\n  const clearFields = () => {\n    setNombre('');\n    setDescripcion('');\n    setPrecio('');\n    setId('');\n  };\n\n  return (\n    <>\n      <div className='form_container'>\n        <h2>Añadir o Actualizar Producto</h2>\n        <div className=\"box\">\n          <input\n            type=\"text\"\n            placeholder=\"Nombre\"\n            autoComplete=\"off\"\n            value={nombre}\n            onChange={(e) => setNombre(e.target.value)}\n          />\n        </div>\n        <div className=\"box\">\n          <input\n            type=\"number\"\n            placeholder=\"Precio\"\n            autoComplete=\"off\"\n            value={precio}\n            onChange={(e) => setPrecio(e.target.value)}\n          />\n        </div>\n        <div className=\"box\">\n          <input\n            type=\"text\"\n            placeholder=\"Descripción\"\n            autoComplete=\"off\"\n            value={descripcion}\n            onChange={(e) => setDescripcion(e.target.value)}\n          />\n        </div>\n        <button onClick={add}>Añadir</button>\n        <button onClick={update}>Actualizar</button>\n      </div>\n\n      <div className=\"database\">\n        <h2>Base de Datos CRUD</h2>\n        <div className=\"container\">\n          {fetchData.map((data) => (\n            <div className=\"box\" key={data.id}>\n              <h2>Nombre: {data.Nombre}</h2>\n              <h2>Precio: {data.Precio}</h2>\n              <h2>Descripción: {data.Descripcion}</h2>\n              <button onClick={() => passData(data.id)}>Actualizar</button>\n              <button onClick={() => del(data.id)}>Eliminar</button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}