{"ast":null,"code":"var _jsxFileName = \"/home/imperio/Documents/code/pp/Login-Auth-Firebase-ReactJS/src/components/dashboard.js\",\n    _s = $RefreshSig$();\n\n// Dashboard.js\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { collection, query, where, getDocs, updateDoc, doc } from 'firebase/firestore';\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword, onAuthStateChanged } from 'firebase/auth';\nimport { db, auth } from './firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const [user, setUser] = useState(null);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState(null);\n  const [specialties, setSpecialties] = useState([]);\n  const [doctors, setDoctors] = useState([]);\n  const [availableSlots, setAvailableSlots] = useState([]);\n  const [userAppointments, setUserAppointments] = useState([]);\n  const [selectedSpecialty, setSelectedSpecialty] = useState('');\n  const [selectedDoctor, setSelectedDoctor] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [adminView, setAdminView] = useState('specialties');\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, currentUser => {\n      if (currentUser) {\n        setUser(currentUser);\n        setIsAdmin(currentUser.email === 'admin@clinica.com');\n        loadSpecialties();\n        loadUserAppointments();\n      } else {\n        setUser(null);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n\n  const handleLogin = async e => {\n    e.preventDefault();\n\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const handleRegister = async e => {\n    e.preventDefault();\n\n    try {\n      await createUserWithEmailAndPassword(auth, email, password);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const loadSpecialties = async () => {\n    try {\n      const specialtiesRef = collection(db, 'specialties');\n      const specialtiesSnapshot = await getDocs(specialtiesRef);\n      const specialtiesList = specialtiesSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setSpecialties(specialtiesList);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const loadDoctors = async specialty => {\n    try {\n      const doctorsRef = collection(db, 'doctors');\n      const q = query(doctorsRef, where('specialty', '==', specialty));\n      const doctorsSnapshot = await getDocs(q);\n      const doctorsList = doctorsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setDoctors(doctorsList);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const loadAvailableSlots = async doctorId => {\n    try {\n      const slotsRef = collection(db, 'appointments');\n      const q = query(slotsRef, where('doctorId', '==', doctorId), where('available', '==', true));\n      const slotsSnapshot = await getDocs(q);\n      const slotsList = slotsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setAvailableSlots(slotsList);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const loadUserAppointments = async () => {\n    if (!user) return;\n\n    try {\n      const appointmentsRef = collection(db, 'appointments');\n      const q = query(appointmentsRef, where('userId', '==', user.uid), where('available', '==', false));\n      const appointmentsSnapshot = await getDocs(q);\n      const appointmentsList = appointmentsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setUserAppointments(appointmentsList);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const bookAppointment = async slotId => {\n    try {\n      const slotRef = doc(db, 'appointments', slotId);\n      await updateDoc(slotRef, {\n        available: false,\n        userId: user.uid\n      });\n      await loadUserAppointments();\n      await loadAvailableSlots(selectedDoctor); // Ensure selectedDoctor is updated before this call\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const cancelAppointment = async slotId => {\n    try {\n      const slotRef = doc(db, 'appointments', slotId);\n      await updateDoc(slotRef, {\n        available: true,\n        userId: null\n      });\n      await loadUserAppointments();\n      await loadAvailableSlots(selectedDoctor); // Ensure selectedDoctor is updated before this call\n    } catch (err) {\n      setError(err.message);\n    }\n  }; // Function to handle specialty selection\n\n\n  const handleSpecialtySelect = specialty => {\n    setSelectedSpecialty(specialty);\n    loadDoctors(specialty); // Load doctors when a specialty is selected\n  }; // Function to handle doctor selection\n\n\n  const handleDoctorSelect = doctorId => {\n    setSelectedDoctor(doctorId);\n    loadAvailableSlots(doctorId); // Load available slots when a doctor is selected\n  };\n\n  const renderLoginView = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-header\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-center\",\n              children: \"Iniciar Sesi\\xF3n\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleLogin,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"email\",\n                  className: \"form-label\",\n                  children: \"Correo Electr\\xF3nico\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"email\",\n                  className: \"form-control\",\n                  id: \"email\",\n                  value: email,\n                  onChange: e => setEmail(e.target.value),\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"password\",\n                  className: \"form-label\",\n                  children: \"Contrase\\xF1a\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"password\",\n                  className: \"form-control\",\n                  id: \"password\",\n                  value: password,\n                  onChange: e => setPassword(e.target.value),\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 33\n              }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"alert alert-danger\",\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-grid gap-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn btn-primary\",\n                  children: \"Iniciar Sesi\\xF3n\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"btn btn-secondary\",\n                  onClick: handleRegister,\n                  children: \"Registrarse\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n\n  const renderMainView = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 d-flex justify-content-between align-items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Reserva de Citas M\\xE9dicas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [isAdmin && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-outline-secondary me-2\",\n            onClick: () => setAdminView(adminView === 'specialties' ? 'doctors' : 'specialties'),\n            children: \"Panel Admin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            onClick: () => auth.signOut(),\n            children: \"Cerrar Sesi\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), isAdmin && adminView === 'specialties' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Especialidades M\\xE9dicas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: specialties.map(specialty => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [specialty.name, /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary ms-2\",\n              onClick: () => handleSpecialtySelect(specialty.name),\n              children: \"Ver Doctores\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 37\n            }, this)]\n          }, specialty.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this), doctors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Doctores\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: doctors.map(doctor => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [doctor.name, \" - \", doctor.specialty, /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-info ms-2\",\n              onClick: () => handleDoctorSelect(doctor.id),\n              children: \"Ver Disponibilidad\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 37\n            }, this)]\n          }, doctor.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }, this), availableSlots.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Disponibilidad de Citas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: availableSlots.map(slot => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [slot.time, \" - \", slot.doctorName, /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success ms-2\",\n              onClick: () => bookAppointment(slot.id),\n              children: \"Reservar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 37\n            }, this)]\n          }, slot.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }, this), userAppointments.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Mis Citas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: userAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [appointment.time, \" - \", appointment.doctorName, /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-danger ms-2\",\n              onClick: () => cancelAppointment(appointment.id),\n              children: \"Cancelar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 37\n            }, this)]\n          }, appointment.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this), doctors.length === 0 && selectedSpecialty && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No hay doctores disponibles para la especialidad seleccionada.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 21\n      }, this), availableSlots.length === 0 && selectedDoctor && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No hay citas disponibles para el doctor seleccionado.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 21\n      }, this), userAppointments.length === 0 && user && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tienes citas programadas.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n\n  return user ? renderMainView() : renderLoginView();\n}\n\n_s(Dashboard, \"NSlNNaVl11eKICmiRxHupjpfXX8=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/imperio/Documents/code/pp/Login-Auth-Firebase-ReactJS/src/components/dashboard.js"],"names":["React","useState","useEffect","collection","query","where","getDocs","updateDoc","doc","signInWithEmailAndPassword","createUserWithEmailAndPassword","onAuthStateChanged","db","auth","Dashboard","user","setUser","email","setEmail","password","setPassword","error","setError","specialties","setSpecialties","doctors","setDoctors","availableSlots","setAvailableSlots","userAppointments","setUserAppointments","selectedSpecialty","setSelectedSpecialty","selectedDoctor","setSelectedDoctor","isAdmin","setIsAdmin","adminView","setAdminView","unsubscribe","currentUser","loadSpecialties","loadUserAppointments","handleLogin","e","preventDefault","err","message","handleRegister","specialtiesRef","specialtiesSnapshot","specialtiesList","docs","map","id","data","loadDoctors","specialty","doctorsRef","q","doctorsSnapshot","doctorsList","loadAvailableSlots","doctorId","slotsRef","slotsSnapshot","slotsList","appointmentsRef","uid","appointmentsSnapshot","appointmentsList","bookAppointment","slotId","slotRef","available","userId","cancelAppointment","handleSpecialtySelect","handleDoctorSelect","renderLoginView","target","value","renderMainView","signOut","name","length","doctor","slot","time","doctorName","appointment"],"mappings":"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","sourcesContent":["// Dashboard.js\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { collection, query, where, getDocs, updateDoc, doc } from 'firebase/firestore';\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword, onAuthStateChanged } from 'firebase/auth';\nimport { db, auth } from './firebase';\n\nfunction Dashboard() {\n    const [user, setUser] = useState(null);\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState(null);\n    const [specialties, setSpecialties] = useState([]);\n    const [doctors, setDoctors] = useState([]);\n    const [availableSlots, setAvailableSlots] = useState([]);\n    const [userAppointments, setUserAppointments] = useState([]);\n    const [selectedSpecialty, setSelectedSpecialty] = useState('');\n    const [selectedDoctor, setSelectedDoctor] = useState('');\n    const [isAdmin, setIsAdmin] = useState(false);\n    const [adminView, setAdminView] = useState('specialties');\n\n    useEffect(() => {\n        const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n            if (currentUser) {\n                setUser(currentUser);\n                setIsAdmin(currentUser.email === 'admin@clinica.com');\n                loadSpecialties();\n                loadUserAppointments();\n            } else {\n                setUser(null);\n            }\n        });\n        return () => unsubscribe();\n    }, []);\n\n    const handleLogin = async (e) => {\n        e.preventDefault();\n        try {\n            await signInWithEmailAndPassword(auth, email, password);\n            setError(null);\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const handleRegister = async (e) => {\n        e.preventDefault();\n        try {\n            await createUserWithEmailAndPassword(auth, email, password);\n            setError(null);\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const loadSpecialties = async () => {\n        try {\n            const specialtiesRef = collection(db, 'specialties');\n            const specialtiesSnapshot = await getDocs(specialtiesRef);\n            const specialtiesList = specialtiesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n            setSpecialties(specialtiesList);\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const loadDoctors = async (specialty) => {\n        try {\n            const doctorsRef = collection(db, 'doctors');\n            const q = query(doctorsRef, where('specialty', '==', specialty));\n            const doctorsSnapshot = await getDocs(q);\n            const doctorsList = doctorsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n            setDoctors(doctorsList);\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const loadAvailableSlots = async (doctorId) => {\n        try {\n            const slotsRef = collection(db, 'appointments');\n            const q = query(slotsRef, where('doctorId', '==', doctorId), where('available', '==', true));\n            const slotsSnapshot = await getDocs(q);\n            const slotsList = slotsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n            setAvailableSlots(slotsList);\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const loadUserAppointments = async () => {\n        if (!user) return;\n        try {\n            const appointmentsRef = collection(db, 'appointments');\n            const q = query(appointmentsRef, where('userId', '==', user.uid), where('available', '==', false));\n            const appointmentsSnapshot = await getDocs(q);\n            const appointmentsList = appointmentsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n            setUserAppointments(appointmentsList);\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const bookAppointment = async (slotId) => {\n        try {\n            const slotRef = doc(db, 'appointments', slotId);\n            await updateDoc(slotRef, { available: false, userId: user.uid });\n            await loadUserAppointments();\n            await loadAvailableSlots(selectedDoctor); // Ensure selectedDoctor is updated before this call\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const cancelAppointment = async (slotId) => {\n        try {\n            const slotRef = doc(db, 'appointments', slotId);\n            await updateDoc(slotRef, { available: true, userId: null });\n            await loadUserAppointments();\n            await loadAvailableSlots(selectedDoctor); // Ensure selectedDoctor is updated before this call\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    // Function to handle specialty selection\n    const handleSpecialtySelect = (specialty) => {\n        setSelectedSpecialty(specialty);\n        loadDoctors(specialty); // Load doctors when a specialty is selected\n    };\n\n    // Function to handle doctor selection\n    const handleDoctorSelect = (doctorId) => {\n        setSelectedDoctor(doctorId);\n        loadAvailableSlots(doctorId); // Load available slots when a doctor is selected\n    };\n\n    const renderLoginView = () => (\n        <div className=\"container mt-5\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col-md-6\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <h2 className=\"text-center\">Iniciar Sesión</h2>\n                        </div>\n                        <div className=\"card-body\">\n                            <form onSubmit={handleLogin}>\n                                <div className=\"mb-3\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Correo Electrónico</label>\n                                    <input type=\"email\" className=\"form-control\" id=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n                                </div>\n                                <div className=\"mb-3\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Contraseña</label>\n                                    <input type=\"password\" className=\"form-control\" id=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\n                                </div>\n                                {error && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                                <div className=\"d-grid gap-2\">\n                                    <button type=\"submit\" className=\"btn btn-primary\">Iniciar Sesión</button>\n                                    <button type=\"button\" className=\"btn btn-secondary\" onClick={handleRegister}>Registrarse</button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n    const renderMainView = () => (\n        <div className=\"container mt-4\">\n            <div className=\"row\">\n                <div className=\"col-12 d-flex justify-content-between align-items-center mb-4\">\n                    <h1>Reserva de Citas Médicas</h1>\n                    <div>\n                        {isAdmin && (\n                            <button className=\"btn btn-outline-secondary me-2\" onClick={() => setAdminView(adminView === 'specialties' ? 'doctors' : 'specialties')}>\n                                Panel Admin\n                            </button>\n                        )}\n                        <button className=\"btn btn-danger\" onClick={() => auth.signOut()}>Cerrar Sesión</button>\n                    </div>\n                </div>\n\n                {/* Renderiza el contenido según la vista de administrador */}\n                {isAdmin && adminView === 'specialties' && (\n                    <div className=\"col-12\">\n                        <h3>Especialidades Médicas</h3>\n                        <ul>\n                            {specialties.map(specialty => (\n                                <li key={specialty.id}>\n                                    {specialty.name}\n                                    <button \n                                        className=\"btn btn-primary ms-2\"\n                                        onClick={() => handleSpecialtySelect(specialty.name)}\n                                    >\n                                        Ver Doctores\n                                    </button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n\n                {/* Sección de doctores */}\n                {doctors.length > 0 && (\n                    <div className=\"col-12 mt-4\">\n                        <h3>Doctores</h3>\n                        <ul>\n                            {doctors.map(doctor => (\n                                <li key={doctor.id}>\n                                    {doctor.name} - {doctor.specialty}\n                                    <button \n                                        className=\"btn btn-info ms-2\"\n                                        onClick={() => handleDoctorSelect(doctor.id)}\n                                    >\n                                        Ver Disponibilidad\n                                    </button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n\n                {/* Sección de disponibilidad de citas */}\n                {availableSlots.length > 0 && (\n                    <div className=\"col-12 mt-4\">\n                        <h3>Disponibilidad de Citas</h3>\n                        <ul>\n                            {availableSlots.map(slot => (\n                                <li key={slot.id}>\n                                    {slot.time} - {slot.doctorName}\n                                    <button \n                                        className=\"btn btn-success ms-2\"\n                                        onClick={() => bookAppointment(slot.id)}\n                                    >\n                                        Reservar\n                                    </button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n\n                {/* Sección de citas del usuario */}\n                {userAppointments.length > 0 && (\n                    <div className=\"col-12 mt-4\">\n                        <h3>Mis Citas</h3>\n                        <ul>\n                            {userAppointments.map(appointment => (\n                                <li key={appointment.id}>\n                                    {appointment.time} - {appointment.doctorName}\n                                    <button \n                                        className=\"btn btn-danger ms-2\"\n                                        onClick={() => cancelAppointment(appointment.id)}\n                                    >\n                                        Cancelar\n                                    </button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n                \n                {/* Informar si no hay doctores o citas disponibles */}\n                {(doctors.length === 0 && selectedSpecialty) && (\n                    <p>No hay doctores disponibles para la especialidad seleccionada.</p>\n                )}\n                \n                {(availableSlots.length === 0 && selectedDoctor) && (\n                    <p>No hay citas disponibles para el doctor seleccionado.</p>\n                )}\n                \n                {(userAppointments.length === 0 && user) && (\n                    <p>No tienes citas programadas.</p>\n                )}\n                \n            </div>\n        </div>\n    );\n\n    return user ? renderMainView() : renderLoginView();\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}